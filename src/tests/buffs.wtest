import cronometrados.buffs.*
import cronometrados.buffTracker.*
import estados.estados.*
import estados.stateManager.*
import magnitudes.*
import obstaculos.obstaculos.*
import personaje.*
import wollok.game.*


describe "test de los buffos" {
	
	var enemigo
	
	fixture {
		stateManager.iniciarEstado()
		stateManager.cambiarEstado()
		
		enemigo = new Enemigo()
		
		game.addVisual(enemigo)
	}
	
	test "Buff Gema duplica los puntos"{
		
		const mega = new MegaMoneda()
		
		game.addVisual(mega)
		
		puntaje.iniciar()
		
		buffTracker.addBuff(buffGema)
		
		mega.colisionar(personaje)
		
		assert.equals(50, puntaje.valor())
		
	}
	
	test "Escudo simple evita una colision"{
		
		buffTracker.addBuff(buffEscudoSimple)
		
		enemigo.colisionar(personaje)
		
		assert.that(stateManager.estaEnJuego())
		
		game.addVisual(enemigo)
		
		enemigo.colisionar(personaje)
		
		assert.notThat(stateManager.estaEnJuego())
	}
	
	test "Escudo Super evita una colision"{
		
		buffTracker.addBuff(buffSuperEscudo)
		
		enemigo.colisionar(personaje)
		
		assert.that(stateManager.estaEnJuego())
		
		game.addVisual(enemigo)
		
		enemigo.colisionar(personaje)
		
		assert.notThat(stateManager.estaEnJuego())
	}
	
	test "Mega escudo evita todas las colisiones mientras esta activo"{
		
		buffTracker.addBuff(buffMegaEscudo)
		
		enemigo.colisionar(personaje)
		
		assert.that(stateManager.estaEnJuego())
		
		game.addVisual(enemigo)
		
		enemigo.colisionar(personaje)
		
		assert.that(stateManager.estaEnJuego())
		
		buffTracker.forceRemoveBuff(buffMegaEscudo)
		
		game.addVisual(enemigo)
		
		enemigo.colisionar(personaje)
		
		assert.notThat(stateManager.estaEnJuego())
		
	}
}